Control Ansible Execution with Conditional Statements
In this challenge, you will modify your Ansible playbook such that disruptive activities (namely, restarting the BIND DNS service on managed hosts) are only executed when absolutely necessary. This is the final step to ensure your Ansible playbook is production-ready. Only making changes to a managed host when changes are needed abides by Ansible's concept of idempotency.

In the playbook.yaml file, locate the task named Configure named.conf.options and add register: named_conf_change to the bottom of the task.

register: named_conf_change

At the bottom of the Restart BIND DNS server task, add

when: named_conf_change.changed

This conditional statement ensures the Restart BIND DNS server task will only execute if the changed boolean value, associated with the named_conf_change variable, which in turn is registered by the Configure named.conf.options task, has a value of True.

In the TERMINAL, execute the ansible-playbook playbook.yaml command.

The output should indicate that, for the first time in this lab, the Restart BIND DNS server task did not make a change to the managed host. In fact, it's now skipping it! This indicates that your conditional statement is working as intended.

Add a comment to the very top of named.conf.options.j2:

// This file is automatically generated by Ansible.
Run ansible-playbook playbook.yaml.

The output should indicate that the Restart of the BIND DNS service was done on the managed host, since the BIND DNS configuration file was changed.

Run ansible-playbook playbook.yaml once more.

The output should indicate that it is again skipping the BIND DNS service restart, as expected.

In the playbook.yaml file, towards the bottom of the Deploy zone files using Jinja2 templates task, add the following

register: zone_file_change

In the playbook.yaml file, above the Restart BIND DNS server task, add a new task that executes BIND's rndc reload command through the ansible.builtin.shell module. It will do so conditionally, when the zone_file_change.changed variable has a value of True.

    - name: Reload zone files
      ansible.builtin.shell: rndc reload
      when: zone_file_change.changed
      become: true
Execute the ansible-playbook playbook.yaml command.

The output should indicate that the rndc reload command was not executed on the managed host–you can see this since its task is is skipping its Reload zone files task–because no DNS zone configuration files were changed.

In the inventory.yaml file, add variables representing a new DNS record:

              - type: "A"
                host: "foo"
                ip: "192.0.2.200"
Run the ansible-playbook playbook.yaml command.

The output should indicate that the rndc reload command was executed on the managed host, since the DNS zone configuration file was changed as a result of us adding new record variables to our inventory.

At the conclusion of this challenge, you should have a playbook.yaml file with content identical to the below screenshot.You should have an inventory.yaml file with content identical to the below screenshot.The terminal output of the final ansible-playbook playbook.yaml command should be identical to the below screenshot.

